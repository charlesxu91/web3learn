pragma solidity ^0.8.17;
contract MultiSigWallet{
    address[] public owner;
    mapping(address=>bool) public isOwner;
    uint256 public required;
    struct Transaction{
        address to;
        uint256 value;
        bytes data;
        boo exected;
    }
    Transaction[] public tractions;
    mapping(uint256=>mapping(address=>bool)) public approved;
    event Deposit(address indexed sender, uint256 amount);
    event Submit(uint256 indexed txId);
    event Approved(address indexed sender, uint256 indexed txId);
    event Revoke(address indexed sender, uint256 indexed txId);
    event Execute(uint256 indexed txId);

    receive() external payable{
        emit Deposit(msg.sender, msg.value);
    }

    modifier onlyOwner(){
        require(isOwner[msg.sender], "not owner");
        _;
    }
    modifier txExists(uint256 _txId){
        require(_txId < tractions.length , "tx d")
    }
    modifier notApproved(uint256 _txId){
        require(!approved[_txId][msg.sender], "tx already approved");
        _;
    }
    modifier notExecuted(uint256 _txId){
        require(!transactions[_txId].exected, "tx is exected");
        _;
    }
    // 构造函数
    constructor(address[] memory _owners, uint256 _required) {
        require(_owners.length > 0, "owner required");
        require(
            _required > 0 && _required <= _owners.length,
            "invalid required number of owners"
        );
        for (uint256 index = 0; index < _owners.length; index++) {
            address owner = _owners[index];
            require(owner != address(0), "invalid owner");
            require(!isOwner[owner], "owner is not unique"); // 如果重复会抛出错误
            isOwner[owner] = true;
            owners.push(owner);
        }
        required = _required;
    }
}