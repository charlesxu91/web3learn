pragma solidity ^0.8.17;
contract EtherWallet{
    address payable public immutable owner;
    event Log(string funName, address from, uint256 value, bytes data);
    constructor(){
        owner = payable(msg.sender);
    }
    receive() external payable{
        emit Log("receive", msg.sender, msg.value, "");
    }
    function withdarw1() external{
        require(msg.sender == owner, "not owner");
        payable(msg.sender).transfer(100);
    }
    function withdarw2() external{
        require(msg.sender == owner, "not owner");
        bool success = payable(msg.sender).send(200);
        require(success, "send failed");
    }
    function withdarw3() external{
        require(msg.sender == owner, "not owner");
        (bool success, _) = msg.sender.call{value: address(this).balance}("");
        require(success, "Call Failed");
    }
    function getBalance() external view returns(uint256){
        return address(this).balance;
    }
}